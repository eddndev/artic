{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Artic",
  "scopeName": "source.artic",
  "patterns": [
    { "include": "#comments" },
    { "include": "#decorators" },
    { "include": "#imports" },
    { "include": "#props-block" },
    { "include": "#utility-block" },
    { "include": "#keywords" },
    { "include": "#types" },
    { "include": "#functions" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#jsx" },
    { "include": "#operators" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.artic",
          "begin": "//",
          "end": "$"
        },
        {
          "name": "comment.block.artic",
          "begin": "/\\*",
          "end": "\\*/"
        },
        {
          "name": "comment.block.jsx.artic",
          "begin": "\\{/\\*",
          "end": "\\*/\\}"
        }
      ]
    },
    "decorators": {
      "patterns": [
        {
          "name": "meta.decorator.artic",
          "match": "@(route|layout|server|client|utility|effect|provide|inject|guard|redirect|meta|middleware|websocket)\\b",
          "captures": {
            "1": { "name": "storage.type.decorator.artic" }
          }
        }
      ]
    },
    "imports": {
      "patterns": [
        {
          "name": "meta.import.artic",
          "begin": "\\b(use)\\s+",
          "end": "$",
          "beginCaptures": {
            "1": { "name": "keyword.control.import.artic" }
          },
          "patterns": [
            {
              "name": "keyword.control.from.artic",
              "match": "\\bfrom\\b"
            },
            {
              "name": "keyword.other.theme.artic",
              "match": "\\btheme\\b"
            },
            {
              "name": "string.quoted.double.artic",
              "begin": "\"",
              "end": "\""
            },
            {
              "name": "meta.brace.curly.artic",
              "match": "[{}]"
            }
          ]
        }
      ]
    },
    "props-block": {
      "patterns": [
        {
          "name": "meta.props.block.artic",
          "begin": "\\b(props)\\s*\\{",
          "end": "\\}",
          "beginCaptures": {
            "1": { "name": "keyword.other.props.artic" }
          },
          "patterns": [
            { "include": "#comments" },
            { "include": "#types" },
            { "include": "#strings" },
            { "include": "#numbers" },
            {
              "name": "variable.other.property.artic",
              "match": "\\b[a-zA-Z_$][a-zA-Z0-9_$]*(?=\\s*:)"
            },
            {
              "name": "keyword.operator.optional.artic",
              "match": "\\?"
            }
          ]
        }
      ]
    },
    "utility-block": {
      "patterns": [
        {
          "name": "meta.utility.block.artic",
          "begin": "(@utility)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\{",
          "end": "\\}",
          "beginCaptures": {
            "1": { "name": "storage.type.decorator.artic" },
            "2": { "name": "entity.name.function.utility.artic" }
          },
          "patterns": [
            { "include": "#utility-tokens" },
            { "include": "#comments" }
          ]
        }
      ]
    },
    "utility-tokens": {
      "patterns": [
        {
          "name": "entity.other.utility-token.artic",
          "match": "\\b(px|py|pt|pb|pl|pr|p|mx|my|mt|mb|ml|mr|m|w|h|min-w|max-w|min-h|max-h|text|font|bg|border|rounded|shadow|grid|flex|gap|space|opacity|z|top|bottom|left|right|absolute|relative|fixed|sticky|hidden|block|inline|inline-block|cursor|transition|transform|scale|rotate|translate|hover|focus|active|disabled|dark|sm|md|lg|xl|2xl)(?=:)"
        },
        {
          "name": "support.constant.utility-value.artic",
          "match": "(?<=:)[a-zA-Z0-9\\-]+"
        },
        {
          "name": "entity.name.function.utility-reference.artic",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*(?!\\s*:)"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.artic",
          "match": "\\b(if|else|switch|case|default|for|while|do|break|continue|return|try|catch|finally|throw|async|await)\\b"
        },
        {
          "name": "storage.type.artic",
          "match": "\\b(let|const|var|function|class|interface|type|enum|export|import)\\b"
        },
        {
          "name": "keyword.operator.new.artic",
          "match": "\\b(new|typeof|instanceof|delete|void)\\b"
        },
        {
          "name": "constant.language.artic",
          "match": "\\b(true|false|null|undefined|NaN|Infinity)\\b"
        },
        {
          "name": "variable.language.artic",
          "match": "\\b(this|super|arguments)\\b"
        },
        {
          "name": "support.function.artic",
          "match": "\\$(state|derived|ref|form|effect)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.primitive.artic",
          "match": "\\b(string|number|boolean|any|void|never|unknown|object|symbol|bigstring)\\b"
        },
        {
          "name": "support.type.builtin.artic",
          "match": "\\b(Array|Promise|Date|RegExp|Map|Set|WeakMap|WeakSet)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.artic",
          "begin": "\\b(let|const)\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*=\\s*(async\\s+)?\\(",
          "end": "\\)",
          "beginCaptures": {
            "1": { "name": "storage.type.artic" },
            "2": { "name": "entity.name.function.artic" },
            "3": { "name": "storage.modifier.async.artic" }
          },
          "patterns": [
            { "include": "#types" },
            { "include": "#comments" }
          ]
        },
        {
          "name": "meta.arrow-function.artic",
          "match": "\\b(let|const)\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*=\\s*(async\\s+)?\\([^)]*\\)\\s*=>",
          "captures": {
            "1": { "name": "storage.type.artic" },
            "2": { "name": "entity.name.function.artic" },
            "3": { "name": "storage.modifier.async.artic" }
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.artic",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.artic",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.artic",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.artic",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.template.artic",
          "begin": "`",
          "end": "`",
          "patterns": [
            {
              "name": "meta.template.expression.artic",
              "begin": "\\$\\{",
              "end": "\\}",
              "patterns": [
                { "include": "$self" }
              ]
            },
            {
              "name": "constant.character.escape.artic",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.hex.artic",
          "match": "\\b0[xX][0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.binary.artic",
          "match": "\\b0[bB][01]+\\b"
        },
        {
          "name": "constant.numeric.octal.artic",
          "match": "\\b0[oO][0-7]+\\b"
        },
        {
          "name": "constant.numeric.decimal.artic",
          "match": "\\b\\d+(\\.\\d+)?([eE][+-]?\\d+)?\\b"
        }
      ]
    },
    "jsx": {
      "patterns": [
        {
          "name": "meta.tag.jsx.artic",
          "begin": "(<)([a-zA-Z][a-zA-Z0-9]*)",
          "end": "(/>)|(>)",
          "beginCaptures": {
            "1": { "name": "punctuation.definition.tag.begin.artic" },
            "2": { "name": "entity.name.tag.artic" }
          },
          "endCaptures": {
            "1": { "name": "punctuation.definition.tag.self-closing.artic" },
            "2": { "name": "punctuation.definition.tag.end.artic" }
          },
          "patterns": [
            { "include": "#jsx-attributes" }
          ]
        },
        {
          "name": "meta.tag.closing.jsx.artic",
          "match": "(</)([a-zA-Z][a-zA-Z0-9]*)(>)",
          "captures": {
            "1": { "name": "punctuation.definition.tag.begin.artic" },
            "2": { "name": "entity.name.tag.artic" },
            "3": { "name": "punctuation.definition.tag.end.artic" }
          }
        },
        {
          "name": "meta.embedded.expression.artic",
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            { "include": "$self" }
          ]
        }
      ]
    },
    "jsx-attributes": {
      "patterns": [
        {
          "name": "meta.attribute.directive.class.artic",
          "begin": "(class)(:)(\\()",
          "end": "\\)",
          "beginCaptures": {
            "1": { "name": "entity.other.attribute-name.artic" },
            "2": { "name": "keyword.operator.directive.artic" },
            "3": { "name": "punctuation.definition.begin.artic" }
          },
          "endCaptures": {
            "0": { "name": "punctuation.definition.end.artic" }
          },
          "patterns": [
            { "include": "#utility-tokens" },
            { "include": "#strings" },
            {
              "name": "meta.embedded.expression.artic",
              "begin": "\\{",
              "end": "\\}",
              "patterns": [{ "include": "$self" }]
            }
          ]
        },
        {
          "name": "meta.attribute.directive.event.artic",
          "match": "(on)(:)([a-z]+)((?:\\|[a-z]+)*)",
          "captures": {
            "1": { "name": "entity.other.attribute-name.artic" },
            "2": { "name": "keyword.operator.directive.artic" },
            "3": { "name": "support.type.event-name.artic" },
            "4": { "name": "support.type.modifier.artic" }
          }
        },
        {
          "name": "meta.attribute.directive.bind.artic",
          "match": "(bind)(:)([a-z]+)",
          "captures": {
            "1": { "name": "entity.other.attribute-name.artic" },
            "2": { "name": "keyword.operator.directive.artic" },
            "3": { "name": "support.type.binding-name.artic" }
          }
        },
        {
          "name": "meta.attribute.directive.slot.artic",
          "match": "(slot)(:)([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": { "name": "entity.other.attribute-name.artic" },
            "2": { "name": "keyword.operator.directive.artic" },
            "3": { "name": "variable.other.slot-name.artic" }
          }
        },
        {
          "name": "entity.other.attribute-name.artic",
          "match": "[a-zA-Z_:][a-zA-Z0-9_:-]*(?=\\s*=)"
        },
        {
          "name": "meta.attribute.value.artic",
          "begin": "=\\s*\\{",
          "end": "\\}",
          "patterns": [
            { "include": "$self" }
          ]
        },
        {
          "name": "string.quoted.double.artic",
          "begin": "=\\s*\"",
          "end": "\""
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.artic",
          "match": "=|\\+=|-=|\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>=|>>>=|\\*\\*="
        },
        {
          "name": "keyword.operator.comparison.artic",
          "match": "===|!==|==|!=|<=|>=|<|>"
        },
        {
          "name": "keyword.operator.logical.artic",
          "match": "&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.arithmetic.artic",
          "match": "\\+|-|\\*|/|%|\\*\\*"
        },
        {
          "name": "keyword.operator.bitwise.artic",
          "match": "&|\\||\\^|~|<<|>>|>>>"
        },
        {
          "name": "keyword.operator.ternary.artic",
          "match": "\\?|:"
        },
        {
          "name": "keyword.operator.spread.artic",
          "match": "\\.\\.\\."
        },
        {
          "name": "keyword.operator.optional-chaining.artic",
          "match": "\\?\\."
        },
        {
          "name": "keyword.operator.nullish-coalescing.artic",
          "match": "\\?\\?"
        }
      ]
    }
  }
}
